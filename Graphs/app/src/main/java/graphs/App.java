/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Graphs.app.src.main.java.graphs;

import java.util.Collection;

public class App {
    public static void main(String[] args) {
        Graph graph = new Graph();

        int vertexValue = graph.addVertex(1);
        System.out.println("Vertex added: " + vertexValue);

        graph.addVertex(2);
        graph.addEdge(1, 2, 5);
        System.out.println("Edge added between 1 and 2 with weight 5");

        Collection<Integer> vertices = graph.getVertices();
        System.out.println("All vertices: " + vertices);

        Collection<Graph.Edge> neighbors = graph.getNeighbors(1);
        System.out.println("Neighbors of vertex 1: " + neighbors);

        int graphSize = graph.size();
        System.out.println("Size of the graph: " + graphSize);

        Graph singleVertexGraph = new Graph();
        int singleVertex = singleVertexGraph.addVertex(1);
        singleVertexGraph.addEdge(1, 1, 3);
        System.out.println("Single vertex graph: " + singleVertexGraph.getVertices() +
                ", Edge: " + singleVertexGraph.getNeighbors(1));

        System.out.println("-------");
        Graph graph2 = new Graph();
        Node node1 = new Node(graph2.addVertex(1));
        Node node2 = new Node(graph2.addVertex(2));
        Node node3 = new Node(graph2.addVertex(3));
        Node node4 = new Node(graph2.addVertex(4));

        graph2.addEdge(1, 2, 0);
        graph2.addEdge(1, 3, 0);
        graph2.addEdge(2, 4, 0);

        System.out.println("Graph Vertices: " + graph2.getVertices());
        System.out.println("Graph Edges: " + graph2.size());

        graph2.breadthFirst(node1);

        System.out.println("--------");

        Graph graph3 = new Graph();

        graph3.addVertex(1);
        graph3.addVertex(2);
        graph3.addVertex(3);
        graph3.addEdge(1, 2, 5);
        graph3.addEdge(2, 3, 10);

        String[] validRoute = {"1", "2", "3"};
        Integer validCost = graph.businessTrip(graph3, validRoute);
        System.out.println("Cost of valid route: " + validCost);

        String[] invalidRoute = {"1", "3", "2"};
        Integer invalidCost = graph.businessTrip(graph3, invalidRoute);
        System.out.println("Cost of invalid route: " + invalidCost);

        String[] nonExistentCityRoute = {"1", "4", "3"};
        Integer nonExistentCityCost = graph3.businessTrip(graph3, nonExistentCityRoute);
        System.out.println("Cost of route with non-existent city: " + nonExistentCityCost);
    }
}
